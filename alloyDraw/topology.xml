<alloy builddate="2021-02-23T10:54:30.238Z">

<instance bitwidth="4" maxseq="4" mintrace="-1" maxtrace="-1" command="Run run$1 for exactly 5 NetElement, 5 NetRelation, 1 Network" filename="/home/pbr/railML/topology.als" tracelength="1" backloop="0">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/NetElement" ID="4" parentID="2">
   <atom label="NetElement$0"/>
   <atom label="NetElement$1"/>
   <atom label="NetElement$2"/>
   <atom label="NetElement$3"/>
   <atom label="NetElement$4"/>
</sig>

<field label="relation" ID="5" parentID="4">
   <tuple> <atom label="NetElement$2"/> <atom label="NetRelation$3"/> </tuple>
   <tuple> <atom label="NetElement$3"/> <atom label="NetRelation$2"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="NetRelation$0"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="NetRelation$1"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="NetRelation$3"/> </tuple>
   <types> <type ID="4"/> <type ID="6"/> </types>
</field>

<sig label="this/NetRelation" ID="6" parentID="2">
   <atom label="NetRelation$0"/>
   <atom label="NetRelation$1"/>
   <atom label="NetRelation$2"/>
   <atom label="NetRelation$3"/>
</sig>

<field label="navigability" ID="7" parentID="6">
   <tuple> <atom label="NetRelation$0"/> <atom label="BA$0"/> </tuple>
   <tuple> <atom label="NetRelation$1"/> <atom label="AB$0"/> </tuple>
   <tuple> <atom label="NetRelation$2"/> <atom label="AB$0"/> </tuple>
   <tuple> <atom label="NetRelation$3"/> <atom label="Both$0"/> </tuple>
   <types> <type ID="6"/> <type ID="8"/> </types>
</field>

<field label="positionOnA" ID="9" parentID="6">
   <tuple> <atom label="NetRelation$0"/> <atom label="Zero$0"/> </tuple>
   <tuple> <atom label="NetRelation$1"/> <atom label="One$0"/> </tuple>
   <tuple> <atom label="NetRelation$2"/> <atom label="One$0"/> </tuple>
   <tuple> <atom label="NetRelation$3"/> <atom label="Zero$0"/> </tuple>
   <types> <type ID="6"/> <type ID="10"/> </types>
</field>

<field label="positionOnB" ID="11" parentID="6">
   <tuple> <atom label="NetRelation$0"/> <atom label="One$0"/> </tuple>
   <tuple> <atom label="NetRelation$1"/> <atom label="Zero$0"/> </tuple>
   <tuple> <atom label="NetRelation$2"/> <atom label="One$0"/> </tuple>
   <tuple> <atom label="NetRelation$3"/> <atom label="One$0"/> </tuple>
   <types> <type ID="6"/> <type ID="10"/> </types>
</field>

<field label="elementA" ID="12" parentID="6">
   <tuple> <atom label="NetRelation$0"/> <atom label="NetElement$4"/> </tuple>
   <tuple> <atom label="NetRelation$1"/> <atom label="NetElement$4"/> </tuple>
   <tuple> <atom label="NetRelation$2"/> <atom label="NetElement$3"/> </tuple>
   <tuple> <atom label="NetRelation$3"/> <atom label="NetElement$4"/> </tuple>
   <types> <type ID="6"/> <type ID="4"/> </types>
</field>

<field label="elementB" ID="13" parentID="6">
   <tuple> <atom label="NetRelation$0"/> <atom label="NetElement$4"/> </tuple>
   <tuple> <atom label="NetRelation$1"/> <atom label="NetElement$4"/> </tuple>
   <tuple> <atom label="NetRelation$2"/> <atom label="NetElement$3"/> </tuple>
   <tuple> <atom label="NetRelation$3"/> <atom label="NetElement$2"/> </tuple>
   <types> <type ID="6"/> <type ID="4"/> </types>
</field>

<sig label="this/None" ID="14" parentID="8" one="yes">
   <atom label="None$0"/>
</sig>

<sig label="this/Both" ID="15" parentID="8" one="yes">
   <atom label="Both$0"/>
</sig>

<sig label="this/AB" ID="16" parentID="8" one="yes">
   <atom label="AB$0"/>
</sig>

<sig label="this/BA" ID="17" parentID="8" one="yes">
   <atom label="BA$0"/>
</sig>

<sig label="this/Navigability" ID="8" parentID="2" abstract="yes">
</sig>

<sig label="this/Zero" ID="18" parentID="10" one="yes">
   <atom label="Zero$0"/>
</sig>

<sig label="this/One" ID="19" parentID="10" one="yes">
   <atom label="One$0"/>
</sig>

<sig label="this/Positioning" ID="10" parentID="2" abstract="yes">
</sig>

<sig label="this/Network" ID="20" parentID="2">
</sig>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

<skolem label="$this/elementOn" ID="m0">
   <tuple> <atom label="NetElement$2"/> <atom label="One$0"/> <atom label="NetElement$2"/> </tuple>
   <tuple> <atom label="NetElement$3"/> <atom label="One$0"/> <atom label="NetElement$3"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="Zero$0"/> <atom label="NetElement$2"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="Zero$0"/> <atom label="NetElement$4"/> </tuple>
   <tuple> <atom label="NetElement$4"/> <atom label="One$0"/> <atom label="NetElement$4"/> </tuple>
   <types> <type ID="4"/> <type ID="10"/> <type ID="4"/> </types>
</skolem>

</instance>

<source filename="/home/pbr/railML/topology.als" content="module topology&#x000a;&#x000a;/**&#x000a;&#x0009;RailML topology&#x000a;**/&#x000a;&#x000a;&#x000a;// https://wiki3.railml.org/wiki/IS:netElement&#x000a;sig NetElement {&#x000a;&#x0009;// Atributes&#x000a;&#x0009;-- length: lone Natural, // in meters but can be decimal (?)&#x000a;&#x0009;-- id: one Id,&#x000a;&#x000a;&#x0009;// Children&#x000a;&#x0009;relation: set NetRelation&#x000a;&#x0009;-- associatedPositionSystem: set AssociatedPositionSystem,&#x000a;&#x0009;-- elementCollectionOrdered: seq NetElement,&#x000a;&#x0009;-- elementCollectionUnordered: set NetElement,&#x000a;&#x0009;-- isValid: set Validation,&#x000a;&#x0009;-- name: set Name,&#x000a;}&#x000a;&#x000a;fact NetElement {&#x000a;&#x0009;-- Relation is redundant&#x000a;&#x0009;relation = ~(elementA+elementB)&#x000a;}&#x000a;&#x000a;// https://wiki3.railml.org/wiki/IS:netRelation&#x000a;sig NetRelation {&#x000a;&#x0009;// Atributes&#x000a;&#x0009;navigability: one Navigability,&#x000a;&#x0009;positionOnA: one Positioning,&#x000a;&#x0009;positionOnB: one Positioning,&#x000a;&#x0009;-- id: one Id&#x000a;&#x000a;&#x0009;// Children&#x000a;&#x0009;elementA: one NetElement,&#x000a;&#x0009;elementB: one NetElement&#x000a;&#x0009;-- isValid: set Validation,&#x000a;&#x0009;-- name: set Name,&#x000a;}&#x000a;&#x000a;// Possible navigability values&#x000a;abstract sig Navigability {}&#x000a;one sig None, Both, AB, BA extends Navigability {}&#x000a;&#x000a;// Possible positioning values&#x000a;abstract sig Positioning {}&#x000a;one sig Zero, One extends Positioning {}&#x000a;&#x000a;fun elementOn: NetElement -&gt; Positioning -&gt; NetElement {&#x000a;&#x0009;{a: NetElement, p: Positioning, b: NetElement |&#x000a;&#x0009;&#x0009;some r: NetRelation {&#x000a;&#x0009;&#x0009;&#x0009;a = r.elementA and p = r.positionOnA and b = r.elementB or&#x000a;&#x0009;&#x0009;&#x0009;a = r.elementB and p = r.positionOnB and b = r.elementB&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;// https://wiki3.railml.org/wiki/IS:network&#x000a;sig Network {&#x000a;&#x0009;// Atributes&#x000a;&#x0009;-- id: one Id&#x000a;&#x000a;&#x0009;// Children&#x000a;&#x0009;-- level: some Level&#x000a;&#x0009;-- name: set Name,&#x000a;&#x0009;-- networkResource: set NetElement+NetRelation&#x000a;}&#x000a;&#x000a;&#x000a;fact Topology {&#x000a;&#x0009;// Assumptions&#x000a;&#x0009;-- If a NetElement is connected to two different NetElements in same endpoint, those must also be connected&#x000a;&#x0009;all a: NetElement, disj b,c: Positioning.(a.elementOn) | a.elementOn.b = a.elementOn.c implies some b.elementOn.c&#x000a;}&#x000a;&#x000a;run{&#x000a;} for exactly 5 NetElement, 5 NetRelation, 1 Network&#x000a;&#x000a;"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
